<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kubeadm快速部署kubernetes]]></title>
    <url>%2F2019%2F04%2F20%2Fkubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes%2F</url>
    <content type="text"><![CDATA[kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。 这个工具能通过两条指令完成一个kubernetes集群的部署： 12345# 创建一个 Master 节点$ kubeadm init# 将一个 Node 节点加入到当前集群中$ kubeadm join &lt;Master节点的IP和端口 &gt; 安装要求在开始之前，部署Kubernetes集群机器需要满足以下几个条件： 一台或多台机器，操作系统 CentOS7.x-86_x64 硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多 集群中所有机器之间网络互通 可以访问外网，需要拉取镜像 禁止swap分区 学习目标 在所有节点上安装Docker和kubeadm 部署Kubernetes Master 部署容器网络插件 部署 Kubernetes Node，将节点加入Kubernetes集群中 部署Dashboard Web页面，可视化查看Kubernetes资源 准备环境Kubernetes 架构图 123456789101112131415161718192021222324关闭防火墙：$ systemctl stop firewalld$ systemctl disable firewalld关闭selinux：$ sed -i &apos;s/enforcing/disabled/&apos; /etc/selinux/config $ setenforce 0关闭swap：$ swapoff -a $ 临时$ vim /etc/fstab $ 永久添加主机名与IP对应关系（记得设置主机名）：$ cat /etc/hosts192.168.137.5 k8s-master192.168.137.100 k8s-node1192.168.137.101 k8s-node2将桥接的IPv4流量传递到iptables的链：$ cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF$ sysctl --system 所有节点安装Docker/kubeadm/kubeletKubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。 安装Docker12345$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo$ yum -y install docker-ce-18.06.1.ce-3.el7$ systemctl enable docker &amp;&amp; systemctl start docker$ docker --versionDocker version 18.06.1-ce, build e68fc7a 添加阿里云YUM软件源123456789$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF 安装kubeadm，kubelet和kubectl由于版本更新频繁，这里指定版本号部署： 12345$ yum install -y kubelet-1.13.3 kubeadm-1.13.3 kubectl-1.13.3$ systemctl enable kubelet#kubeadm：初始化Cluster#kubelet：运行在Cluster上的所有节点，启动Pod和容器#kubectl：Kubernetes命令行工具 ##部署Kubernetes Master 123456789101112131415161718$ kubeadm init \ --apiserver-advertise-address=192.168.137.5 \ --image-repository registry.aliyuncs.com/google_containers \ --kubernetes-version v1.13.3 \ --service-cidr=10.1.0.0/16\ --pod-network-cidr=10.244.0.0/16 #--apiserver-advertise-address=192.168.137.5：指定Master的哪个interface与Cluster的其他节点通信，如果不指定，则自动选择有默认GW的interface #--pod-network-cidr=10.244.137.0/16：Pod网络范围，为了使用flannel方案，则必须设置此网段的CIDR 1、kubeadm执行初始化检查 2、生成token和证书 3、生成KubeConfig文件，Kubelet需要用这个文件与Master通信 4、安装Master组件，会从Google的Regisry下载组件的Dokcer镜像 5、安装附加组件kube-proxy和kube-dns 6、Kubernets初始化成功 ！！ kubectl get pods -n kube-system检测镜像是否下载成功 ！！ kubectl delete pods kube-flannel-ds-amd64-s5t56 -n kube-system 由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。 使用kubectl工具：推荐使用普通用户执行，root用户有些问题 1234mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config$ kubectl get nodes 安装Pod网络插件（CNI）1$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml 确保能够访问到quay.io这个registery。 加入Kubernetes Node在node上执行！！！！！！！！！！！使用kubectl get node查看向集群添加新节点，执行在kubeadm init输出（master上）的kubeadm join命令： 12$ kubeadm join 192.168.137.5:6443 --token hm2vby.27zp6mugvhaio2yu --discovery-token-ca-cert-hash sha256:4ae8da8f9c9319cb7980ea8f91b93baca34d77be67bcb35c89ef7faffae2bcbc#使用--node-name [string] 指定加入kubernetes集群的主机名 测试kubernetes集群在Kubernetes集群中创建一个pod，验证是否正常运行： 123$ kubectl create deployment nginx --image=nginx$ kubectl expose deployment nginx --port=80 --type=NodePort$ kubectl get pod,svc 访问地址：http://NodeIP:Port 部署 Dashboard1$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml 默认镜像国内无法访问，修改镜像地址为： lizhenliang/kubernetes-dashboard-amd64:v1.10.1 默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部： 123456789101112131415kind: ServiceapiVersion: v1metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kube-systemspec: type: NodePort ports: - port: 443 targetPort: 8443 nodePort: 30001 selector: k8s-app: kubernetes-dashboard 1$ kubectl apply -f kubernetes-dashboard.yaml 访问地址：http://NodeIP:30001 创建service account并绑定默认cluster-admin管理员集群角色： 123$ kubectl create serviceaccount dashboard-admin -n kube-system$ kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin$ kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &apos;/dashboard-admin/&#123;print $1&#125;&apos;) 使用输出的token登录Dashboard。]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[lvs+keepalived高可用架构]]></title>
    <url>%2F2019%2F03%2F31%2Flvs%2Bkeepalived%2F</url>
    <content type="text"><![CDATA[注意 1、两者使用的系统必须一致，此实验如下图 2、一定要关闭防火墙进行测试 3、一定要通过start/stop来管理keepalived，不要通过restart 4、VIP绑定的那个物理网卡一定要使用仅主机模式，不要使用nat模式！！！！！ &lt;! more &gt; LB调度器关闭firewalld与selinux12$ systemctl stop firewalld &amp;&amp; systemctl disable firewalld$ setenforce 0 &amp;&amp; sed 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config 安装keepalived1$ yum install keepalived -y Generate static files1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465$ vim /etc/keepalived/keepalived.conf ! Configuration File for keepalived global_defs &#123; notification_email &#123; #监控keepalive,当出现错误时,会发送邮件 acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id LVS_1 vrrp_skip_check_adv_addr vrrp_strict vrrp_garp_interval 0 vrrp_gna_interval 0 &#125; vrrp_instance VI_1 &#123; state MASTER #标记路由器状态 interface ens33 #绑定ip地址的接口 virtual_router_id 51 #高可用keepalived组必须一致 priority 150 #优先级，优先级越高越优，建议相差50CCCC advert_int 1 #组播信息发送间隔，两个节点需一致 authentication &#123; #keepalive组之间的消息认证 auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; #设置VIP，两个节点需一致 192.168.211.100/24 &#125; &#125; vrrp_instance VI_2 &#123; state BACKUP interface ens33 virtual_router_id 52 #多实例下router_id不能一致 priority 50 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.1.100/24 &#125; &#125; #设置虚拟ip服务 virtual_server 192.168.211.100 80 &#123; delay_loop 6 #设定检查间隔 lb_algo rr #指定LVS算法 lb_kind NAT #指定LVS模式 nat_mask 255.255.255.0 persistence_timeout 50 #持久连接设置，会话保持时间 protocol TCP #转发协议为TCP real_server 10.0.0.22 80 &#123; weight 1 #后端实际TCP服务配置 &#125; real_server 10.0.0.23 80 &#123; weight 1 &#125; &#125; Deploy to remote sites1$ hexo deploy]]></content>
      <categories>
        <category>HA</category>
      </categories>
      <tags>
        <tag>LVS</tag>
      </tags>
  </entry>
</search>
