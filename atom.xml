<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Divine</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wifishark.github.io/"/>
  <updated>2019-05-21T12:19:46.699Z</updated>
  <id>https://wifishark.github.io/</id>
  
  <author>
    <name>Divine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wifishark.github.io/2019/05/21/HTTP%E4%B8%8EHTTPS/"/>
    <id>https://wifishark.github.io/2019/05/21/HTTP与HTTPS/</id>
    <published>2019-05-21T12:19:39.493Z</published>
    <updated>2019-05-21T12:19:46.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h1><p><a name="HTTP"></a></p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p><a name="703d6307"></a></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1556094593034-33daf4ac-7084-495b-837c-05c334cab59d.png#align=left&amp;display=inline&amp;height=911&amp;name=image.png&amp;originHeight=911&amp;originWidth=735&amp;size=325869&amp;status=done&amp;width=735" alt="image.png"><br><a name="fe2df04a"></a></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><table><thead><tr><th>版本</th><th>产生时间</th><th>内容</th><th>发展现状</th></tr></thead><tbody><tr><td>HTTP/0.9</td><td>1991年</td><td>不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求</td><td>没有作为正式的标准</td></tr><tr><td>HTTP/1.0</td><td>1996年</td><td>传输内容格式不限制，增加PUT、PATCH、HEAD、 OPTIONS、DELETE命令</td><td>正式作为标准</td></tr><tr><td>HTTP/1.1</td><td>1997年</td><td>持久连接(长连接)、节约带宽、HOST域、管道机制、分块传输编码</td><td>2015年前使用最广泛</td></tr><tr><td>HTTP/2</td><td>2015年</td><td>多路复用、服务器推送、头信息压缩、二进制协议等</td><td>逐渐覆盖市场</td></tr></tbody></table><p><a name="5b08d911"></a></p><h2 id="HTTP-vs-HTTPS"><a href="#HTTP-vs-HTTPS" class="headerlink" title="HTTP vs HTTPS"></a>HTTP vs HTTPS</h2><ol><li>无连接<ol><li>限制每次连接只处理一个请求。服务器处理完客户的请求并收到客户的应答后断开连接。采用这种方式可以节省时间</li><li>HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。</li><li>比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。</li></ol></li><li>无状态<ol><li>协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。</li><li>比如访问一个网站需要反复进行登录操作</li><li>用户A在超市购买的任何商品都应该放在A的购物车内，不论是用户A什么时间购买的，这都是属于同一个会话的，不能放入用户B或用户C的购物车内，这不属于同一个会话。而HTTP为无状态协议，一旦数据交换完毕，则会关闭会话，下一次连接请求时，就不能获取上次的会话，即不能保存购物车中的信息</li></ol></li><li>基于请求和响应：基本的特性，由客户端发起请求，服务端响应</li><li>简单快速、灵活</li><li><p>通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性<br><a name="fe2fc2ec"></a></p><h2 id="HTTP-1-1-vs-HTTP-2-0"><a href="#HTTP-1-1-vs-HTTP-2-0" class="headerlink" title="HTTP/1.1 vs HTTP/2.0"></a>HTTP/1.1 vs HTTP/2.0</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1556095208633-eca23e35-b6a0-4b80-81ea-bfc5d508bbcf.png#align=left&amp;display=inline&amp;height=757&amp;name=image.png&amp;originHeight=958&amp;originWidth=944&amp;size=365756&amp;status=done&amp;width=746" alt="image.png"><br>采用多路复用的技术，通过单一的TCP请求发送多个请求内容。而不像HTTP/1.1，因为一个TCP连接请求只能请求一个信息，所以需要建立多个TCP请求，网站请求速度太慢<br><a name="5cc6d6c5"></a></p><h2 id="针对HTTP无状态，无连接而导致需要多次请求服务器"><a href="#针对HTTP无状态，无连接而导致需要多次请求服务器" class="headerlink" title="针对HTTP无状态，无连接而导致需要多次请求服务器"></a>针对HTTP无状态，无连接而导致需要多次请求服务器</h2></li><li><p>HTTP/1.1持久连接（HTTP keep-alive），只要任意一端没有明确提出断开连接，则保持TCP连接状态。在请求首部字段中的Connection：keep-alive中表明使用持久连接。Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接。但http为无状态协议，每一个请求都是独立的，keep-alive不能改变无状态的问题</p></li><li>通过Cookie/Session技术解决http无状态问题<ol><li>Cookie：缺点为每次都要向Server发送浏览器中保存的所有cookie与Server中进行匹配，这消耗了Server的资源，安全性不高</li><li>Session：存储在服务器端，安全性较高。通过cookie中的session id获取保存在服务器端的session信息。因为session存放在服务器的内存中，过多的信息会导致服务器负担加重，所以会把重要的信息存放在session中，不重要的信息存放在cookie中</li></ol></li><li><p>应用http/2.0多路复用，一次请求可以得到多个所需要的文件<br><a name="HTTPS"></a></p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p><a name="95cd1db7"></a></p><h2 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1556091383625-7c6ba16a-0c76-4139-abd2-1afade329b13.png#align=left&amp;display=inline&amp;height=664&amp;name=image.png&amp;originHeight=664&amp;originWidth=728&amp;size=54107&amp;status=done&amp;width=728" alt="image.png"></p></li><li><p>Client向Server发送请求<a href="https://www.baidu.com，然后连接到server的443" target="_blank" rel="noopener">https://www.baidu.com，然后连接到server的443</a> port</p></li><li>Server端必须有一套数字证书。自己颁发的证书需要Client允许才能继续访问，向组织申请的证书则不会弹出提示页面。Web将<a href="https://www.baidu.com的网站证书（其实就是公钥，但是包含了很多信息证书的颁发机构，过期时间、服务端的公钥，第三方证书认证机构(CA)的签名，服务端的域名信息等内容）发送给Client，Client收到后会与浏览器中内置的证书对比，如果不安全则会提示有风险" target="_blank" rel="noopener">https://www.baidu.com的网站证书（其实就是公钥，但是包含了很多信息证书的颁发机构，过期时间、服务端的公钥，第三方证书认证机构(CA)的签名，服务端的域名信息等内容）发送给Client，Client收到后会与浏览器中内置的证书对比，如果不安全则会提示有风险</a></li><li>Client解析证书</li></ol><p>这部分工作是由Client的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随即值（秘钥）。然后用证书对该随机值进行加密。并发送给Server</p><ol start="4"><li>Server使用私钥解密得到秘钥，以后Server与Client通信使用此秘钥<br><a name="8db71798"></a><h2 id="怎么保证Server给Client下发的是真正的公钥而不是中间人伪造的？"><a href="#怎么保证Server给Client下发的是真正的公钥而不是中间人伪造的？" class="headerlink" title="怎么保证Server给Client下发的是真正的公钥而不是中间人伪造的？"></a>怎么保证Server给Client下发的是真正的公钥而不是中间人伪造的？</h2>中间人攻击<br><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1556092952569-b9ef353d-60cc-4752-8e57-666d52a7bcc6.png#align=left&amp;display=inline&amp;height=590&amp;name=image.png&amp;originHeight=609&amp;originWidth=770&amp;size=100352&amp;status=done&amp;width=746" alt="image.png"></li></ol><p>解决方案：中间人可以伪装证书中的公钥，所以就不让他伪装。使用CA证书机构中定制的私钥对证书进行加密。中间人没有此私钥。客户端就会拒收中间人发送来的公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">中间人攻击？</span><br><span class="line">中间人攻击（MITM攻击）是指，黑客拦截并篡改网络中的通信数据。又分为被动MITM和主动MITM，被动MITM只窃取</span><br><span class="line">  通信数据而不修改，而主动MITM不但能窃取数据，还会篡改通信数据。最常见的中间人攻击常常发生在公共wifi或</span><br><span class="line">  者公共路由上。</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1556092901559-40b29c59-d290-4107-9051-bf7583f7d1f5.png#align=left&amp;display=inline&amp;height=502&amp;name=image.png&amp;originHeight=599&amp;originWidth=890&amp;size=207342&amp;status=done&amp;width=746" alt="image.png"></p><p>过程</p><ol><li>数字证书包括了加密后服务器的公钥、权威机构的信息、服务器域名，还有经过CA私钥签名之后的证书内容（经过先通过Hash函数计算得到证书数字摘要，然后用权威机构私钥加密数字摘要得到数字签名)，签名计算方法以及证书对应的域名。当客户端收到这个证书之后，使用本地配置的权威机构的公钥对证书进行解密得到服务端的公钥和证书的数字签名，数字签名经过CA公钥解密得到证书信息摘要，然后根据证书上描述的计算证书的方法计算一下当前证书的信息摘要，与收到的信息摘要作对比，如果一样，表示证书一定是服务器下发的，没有被中间人篡改过。因为中间人虽然有权威机构的公钥，能够解析证书内容并篡改，但是篡改完成之后中间人需要将证书重新加密，但是中间人没有权威机构的私钥，无法加密，强行加密只会导致客户端无法解密，如果中间人强行乱修改证书，就会导致证书内容和证书签名不匹配。</li><li>那第三方攻击者能否让自己的证书显示出来的信息也是服务端呢？（伪装服务端一样的配置）显然这个是不行的，因为当第三方攻击者去CA那边寻求认证的时候CA会要求其提供例如域名的whois信息、域名管理邮箱等证明你是服务端域名的拥有者，而第三方攻击者是无法提供这些信息所以他就是无法骗CA他拥有属于服务端的域名</li></ol><p><a name="8011d94b"></a></p><h2 id="SSL与TLS的区别"><a href="#SSL与TLS的区别" class="headerlink" title="SSL与TLS的区别"></a>SSL与TLS的区别</h2><ol><li>SSL：Secure Socket Layer，安全套接字层。位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。该协议由两层组成：SSL记录协议和SSL握手协议。</li><li><p>TLS：Transport Layer Security，传输层安全协议。用于两个应用程序之间提供保密性和数据完整性。该协议由两层组成：TLS记录协议和TLS握手协议。<br><a name="25f9c7fa"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>安全性考虑</p></li><li><p>HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用</p></li><li>SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行</li></ol><p>成本考虑</p><ol><li>费钱：SSL证书需要购买申请，功能越强大的证书费用越高</li><li>IPv4资源有限：SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗（SSL有扩展可以部分解决这个问题，但是比较麻烦，而且要求浏览器、操作系统支持，Windows XP就不支持这个扩展，考虑到XP的装机量，这个特性几乎没用）</li><li>耗电：根据ACM CoNEXT数据显示，使用HTTPS协议会使页面的加载时间延长近50%，增加10%到20%的耗电。</li><li>HTTPS连接缓存不如HTTP高效，流量成本高。</li><li>HTTPS连接服务器端资源占用高很多，支持访客多的网站需要投入更大的成本。</li><li><p>HTTPS协议握手阶段比较费时，对网站的响应速度有影响，影响用户体验。比较好的方式是采用分而治之，例如12306网站的主页使用HTTP协议，有关于用户信息等方面使用HTTPS。<br><a name="5c571ff0"></a></p><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>中间人攻击（MITM攻击）：黑客拦截并篡改网络中的通信数据。又分为被动MITM和主动MITM，被动MITM只窃取通信数据而不修改，而主动MITM不但能窃取数据，还会篡改通信数据。最常见的中间人攻击常常发生在公共wifi或者公共路由上。<br><a name="9Tvuj"></a></p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1></li><li><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p></li><li><p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。<br><a name="Awapu"></a></p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1></li><li><p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p></li><li><p>器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。<br><a name="xuon4"></a></p><h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1556113673692-7084f430-5406-4734-bc00-a57f95c5307d.png#align=left&amp;display=inline&amp;height=878&amp;name=image.png&amp;originHeight=728&amp;originWidth=606&amp;size=112864&amp;status=done&amp;width=731" alt="image.png"><br><br><br>过程</p></li><li><p>用户登录校验，校验成功后就返回Token给客户端。</p></li><li>客户端收到数据后保存在客户端</li><li>客户端每次访问API是携带Token到服务器端。</li><li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li></ol><p>特性</p><ol><li>无状态，可扩展</li><li>安全性</li><li>可扩展性</li><li>多平台跨域</li></ol><p>详细介绍<a href="https://www.cnblogs.com/moyand/p/9047978.htm" target="_blank" rel="noopener">https://www.cnblogs.com/moyand/p/9047978.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP与HTTPS&quot;&gt;&lt;a href=&quot;#HTTP与HTTPS&quot; class=&quot;headerlink&quot; title=&quot;HTTP与HTTPS&quot;&gt;&lt;/a&gt;HTTP与HTTPS&lt;/h1&gt;&lt;p&gt;&lt;a name=&quot;HTTP&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;HTTP&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CDN</title>
    <link href="https://wifishark.github.io/2019/02/03/CDN/"/>
    <id>https://wifishark.github.io/2019/02/03/CDN/</id>
    <published>2019-02-03T13:02:55.000Z</published>
    <updated>2019-04-22T09:32:32.943Z</updated>
    
    <content type="html"><![CDATA[<p><a name="79ff8f90"></a></p><h1 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1555922936060-586a256b-132c-4b29-817d-03b9375f4064.png#align=left&amp;display=inline&amp;height=420&amp;originHeight=587&amp;originWidth=1042&amp;status=done&amp;width=746" alt><br>当用户请求一个文件时，cdn工作过程如下</p><ol><li>DNS迭代查询local DNS</li><li>当地local DNS递归查询服务器的GSLB（全局负载均衡）</li><li>GSLB根据local DNS返回最佳CDN接入节点IP给User</li><li>用户得到最佳CDN接入点IP</li><li>如果该节点没有用户想要获取的内容，则通过内部路由访问上一个节点，直到找到文件或到达源站为止</li><li>CDN接入点缓存该数据，下次请求文件时可以直接返回</li></ol><p>参考资料：<a href="https://cloud.tencent.com/document/product/228" target="_blank" rel="noopener">腾讯云CDN</a>，<a href="https://blog.csdn.net/lu_embedded/article/details/80519898" target="_blank" rel="noopener">漫画讲解CDN</a>，<a href="https://www.cnblogs.com/losbyday/p/5843960.html" target="_blank" rel="noopener">CDN技术详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;79ff8f90&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;原理图&quot;&gt;&lt;a href=&quot;#原理图&quot; class=&quot;headerlink&quot; title=&quot;原理图&quot;&gt;&lt;/a&gt;原理图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuq
      
    
    </summary>
    
      <category term="网络" scheme="https://wifishark.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="CDN" scheme="https://wifishark.github.io/tags/CDN/"/>
    
      <category term="网络" scheme="https://wifishark.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm快速部署kubernetes</title>
    <link href="https://wifishark.github.io/2019/02/01/kubeadm%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2kubernetes/"/>
    <id>https://wifishark.github.io/2019/02/01/kubeadm快速部署kubernetes/</id>
    <published>2019-02-01T13:02:55.000Z</published>
    <updated>2019-04-22T05:29:45.477Z</updated>
    
    <content type="html"><![CDATA[<p>kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。</p><p>这个工具能通过两条指令完成一个kubernetes集群的部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个 Master 节点</span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"># 将一个 Node 节点加入到当前集群中</span><br><span class="line">$ kubeadm join &lt;Master节点的IP和端口 &gt;</span><br></pre></td></tr></table></figure><p><a name="d9bc8687"></a></p><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><p>在开始之前，部署Kubernetes集群机器需要满足以下几个条件：</p><ul><li>一台或多台机器，操作系统 CentOS7.x-86_x64</li><li>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多</li><li>集群中所有机器之间网络互通</li><li>可以访问外网，需要拉取镜像</li><li>禁止swap分区</li></ul><p><a name="067b3d5b"></a></p><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ol><li>在所有节点上安装Docker和kubeadm</li><li>部署Kubernetes Master</li><li>部署容器网络插件</li><li>部署 Kubernetes Node，将节点加入Kubernetes集群中</li><li>部署Dashboard Web页面，可视化查看Kubernetes资源</li></ol><p><a name="a9421500"></a></p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><pre><code>Kubernetes 架构图</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙：</span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">关闭selinux：</span><br><span class="line">$ sed -i &apos;s/enforcing/disabled/&apos; /etc/selinux/config </span><br><span class="line">$ setenforce 0</span><br><span class="line"></span><br><span class="line">关闭swap：</span><br><span class="line">$ swapoff -a  $ 临时</span><br><span class="line">$ vim /etc/fstab  $ 永久</span><br><span class="line"></span><br><span class="line">添加主机名与IP对应关系（记得设置主机名）：</span><br><span class="line">$ cat /etc/hosts</span><br><span class="line">192.168.137.5 k8s-master</span><br><span class="line">192.168.137.100 k8s-node1</span><br><span class="line">192.168.137.101 k8s-node2</span><br><span class="line"></span><br><span class="line">将桥接的IPv4流量传递到iptables的链：</span><br><span class="line">$ cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">$ sysctl --system</span><br></pre></td></tr></table></figure><p><a name="e9c11f4d"></a></p><h2 id="所有节点安装Docker-kubeadm-kubelet"><a href="#所有节点安装Docker-kubeadm-kubelet" class="headerlink" title="所有节点安装Docker/kubeadm/kubelet"></a>所有节点安装Docker/kubeadm/kubelet</h2><p>Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p><p><a name="53057bed"></a></p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br></pre></td></tr></table></figure><p><a name="5f610077"></a></p><h3 id="添加阿里云YUM软件源"><a href="#添加阿里云YUM软件源" class="headerlink" title="添加阿里云YUM软件源"></a>添加阿里云YUM软件源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><a name="d581ebe2"></a></p><h3 id="安装kubeadm，kubelet和kubectl"><a href="#安装kubeadm，kubelet和kubectl" class="headerlink" title="安装kubeadm，kubelet和kubectl"></a>安装kubeadm，kubelet和kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y kubelet-1.13.3 kubeadm-1.13.3 kubectl-1.13.3</span><br><span class="line">$ systemctl enable kubelet</span><br><span class="line">#kubeadm：初始化Cluster</span><br><span class="line">#kubelet：运行在Cluster上的所有节点，启动Pod和容器</span><br><span class="line">#kubectl：Kubernetes命令行工具</span><br></pre></td></tr></table></figure><p><a name="2ab38ac1"></a></p><p>##部署Kubernetes Master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.137.5 \</span><br><span class="line">  --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">  --kubernetes-version v1.13.3 \</span><br><span class="line">  --service-cidr=10.1.0.0/16\</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16</span><br><span class="line"> </span><br><span class="line"> #--apiserver-advertise-address=192.168.137.5：指定Master的哪个interface与Cluster的其他节点通信，如果不指定，则自动选择有默认GW的interface</span><br><span class="line"> #--pod-network-cidr=10.244.137.0/16：Pod网络范围，为了使用flannel方案，则必须设置此网段的CIDR</span><br><span class="line"> 1、kubeadm执行初始化检查</span><br><span class="line"> 2、生成token和证书</span><br><span class="line"> 3、生成KubeConfig文件，Kubelet需要用这个文件与Master通信</span><br><span class="line"> 4、安装Master组件，会从Google的Regisry下载组件的Dokcer镜像</span><br><span class="line"> 5、安装附加组件kube-proxy和kube-dns</span><br><span class="line"> 6、Kubernets初始化成功</span><br><span class="line"> </span><br><span class="line"> ！！ kubectl get pods -n kube-system检测镜像是否下载成功</span><br><span class="line"> ！！ kubectl delete pods kube-flannel-ds-amd64-s5t56 -n kube-system</span><br></pre></td></tr></table></figure><p>由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。</p><p>使用kubectl工具：<br>推荐使用普通用户执行，root用户有些问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><p><a name="72a0eda4"></a></p><h2 id="安装Pod网络插件（CNI）"><a href="#安装Pod网络插件（CNI）" class="headerlink" title="安装Pod网络插件（CNI）"></a>安装Pod网络插件（CNI）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>确保能够访问到quay.io这个registery。</p><p><a name="fe838581"></a></p><h2 id="加入Kubernetes-Node"><a href="#加入Kubernetes-Node" class="headerlink" title="加入Kubernetes Node"></a>加入Kubernetes Node</h2><p>在node上执行！！！！！！！！！！！使用kubectl get node查看<br>向集群添加新节点，执行在kubeadm init输出（master上）的kubeadm join命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubeadm join 192.168.137.5:6443 --token hm2vby.27zp6mugvhaio2yu --discovery-token-ca-cert-hash sha256:4ae8da8f9c9319cb7980ea8f91b93baca34d77be67bcb35c89ef7faffae2bcbc</span><br><span class="line">#使用--node-name [string] 指定加入kubernetes集群的主机名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/304339/1554879719133-691228d5-34d8-4eba-97fc-18190bc1eb4c.png#align=left&amp;display=inline&amp;height=88&amp;name=image.png&amp;originHeight=110&amp;originWidth=668&amp;size=12805&amp;status=done&amp;width=534" alt="image.png"><br></p><p><a name="03b77485"></a></p><h2 id="测试kubernetes集群"><a href="#测试kubernetes集群" class="headerlink" title="测试kubernetes集群"></a>测试kubernetes集群</h2><p>在Kubernetes集群中创建一个pod，验证是否正常运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image=nginx</span><br><span class="line">$ kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://NodeIP" target="_blank" rel="noopener">http://NodeIP</a>:Port</p><p><a name="51bce07d"></a></p><h2 id="部署-Dashboard"><a href="#部署-Dashboard" class="headerlink" title="部署 Dashboard"></a>部署 Dashboard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>默认镜像国内无法访问，修改镜像地址为： lizhenliang/kubernetes-dashboard-amd64:v1.10.1</p><p>默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30001</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://NodeIP:30001" target="_blank" rel="noopener">http://NodeIP:30001</a></p><p>创建service account并绑定默认cluster-admin管理员集群角色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line">$ kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class="line">$ kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &apos;/dashboard-admin/&#123;print $1&#125;&apos;)</span><br></pre></td></tr></table></figure><p>使用输出的token登录Dashboard。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kubeadm是官方社区推出的一个用于快速部署kubernetes集群的工具。&lt;/p&gt;
&lt;p&gt;这个工具能通过两条指令完成一个kubernetes集群的部署：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="kubernetes" scheme="https://wifishark.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="https://wifishark.github.io/tags/kubernetes/"/>
    
  </entry>
  
</feed>
